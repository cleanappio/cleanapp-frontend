# CleanApp Frontend with OAuth Authentication

## Changes Summary
Added OAuth authentication support for Google, Facebook, and Apple alongside the existing email authentication.

### Key Changes:
1. Updated API client with OAuth methods
2. Enhanced auth store with OAuth handlers
3. Created OAuth button component
4. Updated login and signup pages with OAuth options
5. Added OAuth configuration to environment variables

---

## Updated Files

### File: ./src/lib/api-client.ts

```typescript
// This would be your API client implementation from the provided files
// I'm including a simplified version here

import axios, { AxiosInstance } from 'axios';

export interface Customer {
  id: string;
  name: string;
  email: string;
  created_at: string;
  updated_at: string;
}

export interface Subscription {
  id: number;
  customer_id: string;
  plan_type: 'base' | 'advanced' | 'exclusive';
  billing_cycle: 'monthly' | 'annual';
  status: 'active' | 'suspended' | 'cancelled';
  start_date: string;
  next_billing_date: string;
}

export interface PaymentMethod {
  id: number;
  customer_id: string;
  stripe_payment_method_id: string;
  stripe_customer_id: string;
  last_four: string;
  brand: string;
  exp_month: number;
  exp_year: number;
  cardholder_name?: string;
  is_default: boolean;
}

export interface BillingHistory {
  id: number;
  customer_id: string;
  subscription_id: number;
  amount: number;
  currency: string;
  status: 'pending' | 'completed' | 'failed' | 'refunded';
  payment_date: string;
}

export interface BillingHistoryResponse {
  data: BillingHistory[];
  pagination: {
    page: number;
    limit: number;
  };
}

export interface PaginationParams {
  page?: number;
  limit?: number;
}

export interface ApiError {
  error: string;
  status?: number;
}

export interface MessageResponse {
  message: string;
}

export interface UpdatePaymentMethodRequest {
  is_default: boolean;
}

export interface HealthCheckResponse {
  status: 'healthy' | 'unhealthy';
  service: string;
}

export interface TokenResponse {
  token: string;
}

export interface OAuthLoginRequest {
  provider: 'google' | 'facebook' | 'apple';
  id_token?: string;
  access_token?: string;
  authorization_code?: string;
}

export interface OAuthUrlResponse {
  url: string;
}

export class ApiClient {
  private axios: AxiosInstance;
  private token: string | null = null;

  constructor() {
    this.axios = axios.create({
      baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    this.axios.interceptors.request.use((config) => {
      if (this.token) {
        config.headers.Authorization = `Bearer ${this.token}`;
      }
      return config;
    });

    this.axios.interceptors.response.use(
      (response) => response,
      (error) => {
        if (error.response?.status === 401) {
          // Clear token on unauthorized
          this.setAuthToken(null);
          if (typeof window !== 'undefined') {
            window.location.href = '/login';
          }
        }
        return Promise.reject(error);
      }
    );
  }

  setAuthToken(token: string | null) {
    this.token = token;
    if (typeof window !== 'undefined') {
      if (token) {
        localStorage.setItem('auth_token', token);
      } else {
        localStorage.removeItem('auth_token');
      }
    }
  }

  getAuthToken(): string | null {
    return this.token;
  }

  async login(email: string, password: string): Promise<TokenResponse> {
    const { data } = await this.axios.post<TokenResponse>('/api/v3/login', { email, password });
    this.setAuthToken(data.token);
    return data;
  }

  // OAuth login methods
  async loginWithOAuth(provider: 'google' | 'facebook' | 'apple', credential: string): Promise<TokenResponse> {
    const payload: OAuthLoginRequest = {
      provider,
      ...(provider === 'apple' ? { authorization_code: credential } : { id_token: credential })
    };
    
    const { data } = await this.axios.post<TokenResponse>('/api/v3/oauth/login', payload);
    this.setAuthToken(data.token);
    return data;
  }

  async getOAuthUrl(provider: 'google' | 'facebook' | 'apple'): Promise<OAuthUrlResponse> {
    const { data } = await this.axios.get<OAuthUrlResponse>(`/api/v3/oauth/${provider}/url`);
    return data;
  }

  async signup(name: string, email: string, password: string, area_ids: number[]): Promise<Customer> {
    const { data } = await this.axios.post<Customer>('/api/v3/customers', {
      name,
      email,
      password,
      area_ids
    });
    return data;
  }

  async getCurrentCustomer() {
    const { data } = await this.axios.get<Customer>('/api/v3/customers/me');
    return data;
  }

  async updateCustomer(updates: { name?: string; email?: string; area_ids?: number[] }): Promise<MessageResponse> {
    const { data } = await this.axios.put<MessageResponse>('/api/v3/customers/me', updates);
    return data;
  }

  async deleteCustomer(): Promise<MessageResponse> {
    const { data } = await this.axios.delete<MessageResponse>('/api/v3/customers/me');
    return data;
  }

  async getCurrentSubscription() {
    const { data } = await this.axios.get<Subscription>('/api/v3/subscriptions/me');
    return data;
  }

  async createSubscription(plan_type: string, billing_cycle: 'monthly' | 'annual', payment_method_id: string) {
    const { data } = await this.axios.post('/api/v3/subscriptions', {
      plan_type,
      billing_cycle,
      stripe_payment_method_id: payment_method_id
    });
    return data;
  }

  async cancelSubscription() {
    const { data } = await this.axios.delete('/api/v3/subscriptions/me');
    return data;
  }

  async getBillingHistory(params?: PaginationParams): Promise<BillingHistoryResponse> {
    const { data } = await this.axios.get<BillingHistoryResponse>('/api/v3/billing-history', {
      params
    });
    return data;
  }

  async getPaymentMethods() {
    const { data } = await this.axios.get<PaymentMethod[]>('/api/v3/payment-methods');
    return data;
  }

  async addPaymentMethod(stripe_payment_method_id: string, is_default = false) {
    const { data } = await this.axios.post('/api/v3/payment-methods', {
      stripe_payment_method_id,
      is_default
    });
    return data;
  }

  async deletePaymentMethod(id: number): Promise<MessageResponse> {
    const { data } = await this.axios.delete<MessageResponse>(`/api/v3/payment-methods/${id}`);
    return data;
  }

  async setDefaultPaymentMethod(id: number): Promise<MessageResponse> {
    const { data } = await this.axios.put<MessageResponse>(`/api/v3/payment-methods/${id}`, {
      is_default: true
    });
    return data;
  }
}

export const apiClient = new ApiClient();
```

---

### File: ./src/lib/auth-store.ts

```typescript
import { create } from 'zustand';
import { apiClient, Customer } from './api-client';

interface AuthState {
  user: Customer | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  loginWithGoogle: (credential: string) => Promise<void>;
  loginWithFacebook: (accessToken: string) => Promise<void>;
  loginWithApple: (authorizationCode: string) => Promise<void>;
  signup: (name: string, email: string, password: string) => Promise<void>;
  logout: () => void;
  checkAuth: () => Promise<void>;
}

export const useAuthStore = create<AuthState>((set) => ({
  user: null,
  isAuthenticated: false,
  isLoading: true,

  login: async (email, password) => {
    const response = await apiClient.login(email, password);
    const user = await apiClient.getCurrentCustomer();
    set({ user, isAuthenticated: true });
  },

  loginWithGoogle: async (credential) => {
    const response = await apiClient.loginWithOAuth('google', credential);
    const user = await apiClient.getCurrentCustomer();
    set({ user, isAuthenticated: true });
  },

  loginWithFacebook: async (accessToken) => {
    const response = await apiClient.loginWithOAuth('facebook', accessToken);
    const user = await apiClient.getCurrentCustomer();
    set({ user, isAuthenticated: true });
  },

  loginWithApple: async (authorizationCode) => {
    const response = await apiClient.loginWithOAuth('apple', authorizationCode);
    const user = await apiClient.getCurrentCustomer();
    set({ user, isAuthenticated: true });
  },

  signup: async (name, email, password) => {
    const customer = await apiClient.signup(name, email, password, [1]); // Default area
    const loginResponse = await apiClient.login(email, password);
    set({ user: customer, isAuthenticated: true });
  },

  logout: () => {
    apiClient.setAuthToken(null);
    set({ user: null, isAuthenticated: false });
  },

  checkAuth: async () => {
    const token = typeof window !== 'undefined' ? localStorage.getItem('auth_token') : null;
    if (token) {
      apiClient.setAuthToken(token);
      try {
        const user = await apiClient.getCurrentCustomer();
        set({ user, isAuthenticated: true, isLoading: false });
      } catch {
        set({ user: null, isAuthenticated: false, isLoading: false });
      }
    } else {
      set({ isLoading: false });
    }
  }
}));
```

---

### File: ./src/components/OAuthButtons.tsx (NEW)

```typescript
import React, { useEffect } from 'react';
import { useRouter } from 'next/router';
import { useAuthStore } from '@/lib/auth-store';
import toast from 'react-hot-toast';

declare global {
  interface Window {
    google?: any;
    FB?: any;
    AppleID?: any;
  }
}

interface OAuthButtonsProps {
  mode: 'login' | 'signup';
}

export default function OAuthButtons({ mode }: OAuthButtonsProps) {
  const router = useRouter();
  const { loginWithGoogle, loginWithFacebook, loginWithApple } = useAuthStore();

  useEffect(() => {
    // Load Google Sign-In SDK
    const loadGoogleScript = () => {
      const script = document.createElement('script');
      script.src = 'https://accounts.google.com/gsi/client';
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);

      script.onload = () => {
        if (window.google) {
          window.google.accounts.id.initialize({
            client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,
            callback: handleGoogleResponse,
          });
        }
      };
    };

    // Load Facebook SDK
    const loadFacebookScript = () => {
      window.fbAsyncInit = function() {
        window.FB.init({
          appId: process.env.NEXT_PUBLIC_FACEBOOK_APP_ID,
          cookie: true,
          xfbml: true,
          version: 'v18.0'
        });
      };

      const script = document.createElement('script');
      script.src = 'https://connect.facebook.net/en_US/sdk.js';
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);
    };

    // Load Apple Sign-In SDK
    const loadAppleScript = () => {
      const script = document.createElement('script');
      script.src = 'https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js';
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);

      script.onload = () => {
        if (window.AppleID) {
          window.AppleID.auth.init({
            clientId: process.env.NEXT_PUBLIC_APPLE_CLIENT_ID,
            scope: 'name email',
            redirectURI: `${window.location.origin}/auth/apple/callback`,
            usePopup: true,
          });
        }
      };
    };

    loadGoogleScript();
    loadFacebookScript();
    loadAppleScript();
  }, []);

  const handleGoogleResponse = async (response: any) => {
    try {
      await loginWithGoogle(response.credential);
      toast.success('Logged in with Google!');
      router.push('/dashboard');
    } catch (error: any) {
      toast.error(error.response?.data?.error || 'Google login failed');
    }
  };

  const handleGoogleClick = () => {
    if (window.google) {
      window.google.accounts.id.prompt();
    }
  };

  const handleFacebookClick = () => {
    if (window.FB) {
      window.FB.login(async (response: any) => {
        if (response.authResponse) {
          try {
            await loginWithFacebook(response.authResponse.accessToken);
            toast.success('Logged in with Facebook!');
            router.push('/dashboard');
          } catch (error: any) {
            toast.error(error.response?.data?.error || 'Facebook login failed');
          }
        }
      }, { scope: 'public_profile,email' });
    }
  };

  const handleAppleClick = async () => {
    if (window.AppleID) {
      try {
        const response = await window.AppleID.auth.signIn();
        await loginWithApple(response.authorization.code);
        toast.success('Logged in with Apple!');
        router.push('/dashboard');
      } catch (error: any) {
        toast.error(error.response?.data?.error || 'Apple login failed');
      }
    }
  };

  return (
    <div className="space-y-3">
      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <div className="w-full border-t border-gray-300" />
        </div>
        <div className="relative flex justify-center text-sm">
          <span className="px-2 bg-white text-gray-500">
            Or {mode === 'login' ? 'sign in' : 'sign up'} with
          </span>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-3">
        {/* Google Sign-In Button */}
        <button
          onClick={handleGoogleClick}
          type="button"
          className="w-full flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
            <path
              fill="#4285F4"
              d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
            />
            <path
              fill="#34A853"
              d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
            />
            <path
              fill="#FBBC05"
              d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
            />
            <path
              fill="#EA4335"
              d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
            />
          </svg>
          Continue with Google
        </button>

        {/* Facebook Sign-In Button */}
        <button
          onClick={handleFacebookClick}
          type="button"
          className="w-full flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-white bg-[#1877F2] hover:bg-[#166FE5] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#1877F2]"
        >
          <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
            <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
          </svg>
          Continue with Facebook
        </button>

        {/* Apple Sign-In Button */}
        <button
          onClick={handleAppleClick}
          type="button"
          className="w-full flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-white bg-black hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
        >
          <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
            <path d="M17.05 20.28c-.98.95-2.05.88-3.08.4-1.09-.5-2.08-.48-3.24 0-1.44.62-2.2.44-3.06-.4C2.79 15.25 3.51 7.59 9.05 7.31c1.35.07 2.29.74 3.08.8 1.18-.24 2.31-.93 3.57-.84 1.51.12 2.65.72 3.4 1.8-3.12 1.87-2.38 5.98.48 7.13-.57 1.5-1.31 2.99-2.54 4.09l.01-.01zM12.03 7.25c-.15-2.23 1.66-4.07 3.74-4.25.29 2.58-2.34 4.5-3.74 4.25z" />
          </svg>
          Continue with Apple
        </button>
      </div>
    </div>
  );
}
```

---

### File: ./src/pages/login.tsx (UPDATED)

```typescript
import { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { useAuthStore } from '@/lib/auth-store';
import OAuthButtons from '@/components/OAuthButtons';
import toast from 'react-hot-toast';

interface LoginForm {
  email: string;
  password: string;
}

export default function LoginPage() {
  const router = useRouter();
  const login = useAuthStore((state) => state.login);
  const [isLoading, setIsLoading] = useState(false);
  
  const { register, handleSubmit, formState: { errors } } = useForm<LoginForm>();

  const onSubmit = async (data: LoginForm) => {
    setIsLoading(true);
    try {
      await login(data.email, data.password);
      toast.success('Welcome back!');
      router.push('/dashboard');
    } catch (error: any) {
      toast.error(error.response?.data?.error || 'Invalid credentials');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Sign in to your account
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Or{' '}
            <Link href="/signup" className="font-medium text-green-600 hover:text-green-500">
              start your free trial
            </Link>
          </p>
        </div>

        {/* OAuth Buttons */}
        <OAuthButtons mode="login" />

        <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email" className="sr-only">
                Email address
              </label>
              <input
                {...register('email', { 
                  required: 'Email is required',
                  pattern: {
                    value: /^\S+@\S+$/i,
                    message: 'Invalid email address'
                  }
                })}
                type="email"
                autoComplete="email"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Email address"
              />
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
              )}
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                {...register('password', { required: 'Password is required' })}
                type="password"
                autoComplete="current-password"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Password"
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
              />
              <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                Remember me
              </label>
            </div>

            <div className="text-sm">
              <a href="#" className="font-medium text-green-600 hover:text-green-500">
                Forgot your password?
              </a>
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
```

---

### File: ./src/pages/signup.tsx (UPDATED)

```typescript
import { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { useAuthStore } from '@/lib/auth-store';
import OAuthButtons from '@/components/OAuthButtons';
import toast from 'react-hot-toast';

interface SignupForm {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
}

export default function SignupPage() {
  const router = useRouter();
  const signup = useAuthStore((state) => state.signup);
  const [isLoading, setIsLoading] = useState(false);
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm<SignupForm>();
  const password = watch('password');

  const onSubmit = async (data: SignupForm) => {
    setIsLoading(true);
    try {
      await signup(data.name, data.email, data.password);
      toast.success('Account created successfully!');
      router.push('/dashboard');
    } catch (error: any) {
      toast.error(error.response?.data?.error || 'Failed to create account');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Create your account
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Or{' '}
            <Link href="/login" className="font-medium text-green-600 hover:text-green-500">
              sign in to your existing account
            </Link>
          </p>
        </div>

        {/* OAuth Buttons */}
        <OAuthButtons mode="signup" />

        <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                Full Name
              </label>
              <input
                {...register('name', { required: 'Name is required' })}
                type="text"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="John Doe"
              />
              {errors.name && (
                <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
              )}
            </div>
            
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email Address
              </label>
              <input
                {...register('email', { 
                  required: 'Email is required',
                  pattern: {
                    value: /^\S+@\S+$/i,
                    message: 'Invalid email address'
                  }
                })}
                type="email"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="john@example.com"
              />
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
              )}
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                {...register('password', { 
                  required: 'Password is required',
                  minLength: {
                    value: 8,
                    message: 'Password must be at least 8 characters'
                  }
                })}
                type="password"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="••••••••"
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>
            
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirm Password
              </label>
              <input
                {...register('confirmPassword', { 
                  required: 'Please confirm your password',
                  validate: value => value === password || 'Passwords do not match'
                })}
                type="password"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="••••••••"
              />
              {errors.confirmPassword && (
                <p className="mt-1 text-sm text-red-600">{errors.confirmPassword.message}</p>
              )}
            </div>
          </div>

          <div className="flex items-center">
            <input
              id="agree-terms"
              name="agree-terms"
              type="checkbox"
              className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
              required
            />
            <label htmlFor="agree-terms" className="ml-2 block text-sm text-gray-900">
              I agree to the{' '}
              <a href="#" className="font-medium text-green-600 hover:text-green-500">
                Terms and Conditions
              </a>
            </label>
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? 'Creating account...' : 'Create account'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
```

---

### File: ./.env.local (EXAMPLE - Create this file)

```env
# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:8080

# Stripe Configuration
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key_here

# OAuth Configuration
NEXT_PUBLIC_GOOGLE_CLIENT_ID=your_google_client_id_here
NEXT_PUBLIC_FACEBOOK_APP_ID=your_facebook_app_id_here
NEXT_PUBLIC_APPLE_CLIENT_ID=your_apple_client_id_here
```

---

### File: ./src/pages/auth/apple/callback.tsx (NEW)

```typescript
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { useAuthStore } from '@/lib/auth-store';
import toast from 'react-hot-toast';

export default function AppleCallbackPage() {
  const router = useRouter();
  const { loginWithApple } = useAuthStore();

  useEffect(() => {
    const handleCallback = async () => {
      const urlParams = new URLSearchParams(window.location.search);
      const code = urlParams.get('code');
      
      if (code) {
        try {
          await loginWithApple(code);
          toast.success('Logged in with Apple!');
          router.push('/dashboard');
        } catch (error: any) {
          toast.error(error.response?.data?.error || 'Apple login failed');
          router.push('/login');
        }
      } else {
        toast.error('No authorization code received');
        router.push('/login');
      }
    };

    handleCallback();
  }, []);

  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto"></div>
        <p className="mt-4 text-gray-600">Completing sign in with Apple...</p>
      </div>
    </div>
  );
}
```

---

## Setup Instructions

### 1. Environment Variables
Create a `.env.local` file in your project root and add:
```env
NEXT_PUBLIC_API_URL=http://localhost:8080
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_key
NEXT_PUBLIC_GOOGLE_CLIENT_ID=your_google_client_id
NEXT_PUBLIC_FACEBOOK_APP_ID=your_facebook_app_id
NEXT_PUBLIC_APPLE_CLIENT_ID=your_apple_client_id
```

### 2. OAuth Provider Setup

#### Google OAuth Setup:
1. Go to [Google Cloud Console](https://console.cloud.google.com/)
2. Create a new project or select existing
3. Enable Google+ API
4. Create OAuth 2.0 credentials
5. Add authorized JavaScript origins: `http://localhost:3000` and your production URL
6. Copy the Client ID to your `.env.local`

#### Facebook OAuth Setup:
1. Go to [Facebook Developers](https://developers.facebook.com/)
2. Create a new app
3. Add Facebook Login product
4. Configure OAuth redirect URIs
5. Copy the App ID to your `.env.local`

#### Apple OAuth Setup:
1. Go to [Apple Developer](https://developer.apple.com/)
2. Create an App ID with Sign in with Apple capability
3. Create a Service ID
4. Configure redirect URLs
5. Copy the Service ID to your `.env.local`

### 3. Backend Requirements
Your backend API should support these new endpoints:
- `POST /api/v3/oauth/login` - Handle OAuth login
- `GET /api/v3/oauth/{provider}/url` - Get OAuth redirect URL (optional)

The OAuth login endpoint should accept:
```json
{
  "provider": "google|facebook|apple",
  "id_token": "token_for_google_and_facebook",
  "authorization_code": "code_for_apple"
}
```

## Features Added

1. **OAuth Authentication Support**:
   - Google Sign-In
   - Facebook Login
   - Apple Sign-In

2. **UI Components**:
   - Reusable `OAuthButtons` component
   - Styled OAuth buttons with provider branding
   - Seamless integration with existing forms

3. **Enhanced Auth Store**:
   - Added OAuth login methods
   - Maintains consistency with existing auth flow

4. **Security Features**:
   - OAuth tokens handled securely
   - Automatic token management
   - Error handling for failed OAuth attempts

5. **User Experience**:
   - "Or continue with" divider
   - Loading states during OAuth
   - Toast notifications for success/failure
   - Redirect to dashboard after successful login

The implementation follows the existing design patterns and integrates smoothly with your current authentication system.