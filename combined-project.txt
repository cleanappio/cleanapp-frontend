# Fixed CleanApp Frontend Project Files

## Bug Fix Summary
Fixed missing API client methods: `deletePaymentMethod` and `setDefaultPaymentMethod` that were being called in the billing page but not implemented in the API client.

---

## File: ./tailwind.config.js

```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/styles/**/*.{js,ts,jsx,tsx,mdx}',
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/lib/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        'cleanapp-green': '#EBF1E8',
      },
    },
  },
  plugins: [],
}
```

---

## File: ./next-env.d.ts

```typescript
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/api-reference/config/typescript for more information.
```

---

## File: ./README.md

```markdown
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
```

---

## File: ./package.json

```json
{
  "name": "cleanapp-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@stripe/react-stripe-js": "^3.7.0",
    "@stripe/stripe-js": "^7.3.1",
    "autoprefixer": "^10.4.21",
    "axios": "^1.10.0",
    "lucide-react": "^0.516.0",
    "next": "15.3.3",
    "postcss": "^8.5.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.58.0",
    "react-hot-toast": "^2.5.2",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.10",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.3",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}
```

---

## File: ./tsconfig.json

```json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

---

## File: ./postcss.config.js

```javascript
module.exports = {
  plugins: {
    'tailwindcss/nesting': {},
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

---

## File: ./next.config.ts

```typescript
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['localhost'], // Add your domain here if needed
  },
}

module.exports = nextConfig
```

---

## File: ./src/styles/globals.css

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

---

## File: ./src/components/Layout.tsx

```typescript
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { useAuthStore } from '@/lib/auth-store';
import { User, LogOut, CreditCard, BarChart3 } from 'lucide-react';

export default function Layout({ children }: { children: React.ReactNode }) {
  const { user, isAuthenticated, logout } = useAuthStore();
  const router = useRouter();

  const handleLogout = () => {
    logout();
    router.push('/');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex">
              <Link href="/" className="flex items-center">
                <Image 
                  src="/cleanapp-logo.png" 
                  alt="CleanApp Logo" 
                  width={200} 
                  height={60}
                  className="h-12 w-auto"
                  priority
                />
              </Link>
              
              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
                <Link
                  href="/pricing"
                  className="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium"
                >
                  Pricing
                </Link>
                {isAuthenticated && (
                  <>
                    <Link
                      href="/dashboard"
                      className="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium"
                    >
                      Dashboard
                    </Link>
                    <Link
                      href="/billing"
                      className="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium"
                    >
                      Billing
                    </Link>
                  </>
                )}
              </div>
            </div>
            
            <div className="flex items-center">
              {isAuthenticated ? (
                <div className="flex items-center space-x-4">
                  <span className="text-sm text-gray-700">{user?.email}</span>
                  <button
                    onClick={handleLogout}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <LogOut className="h-5 w-5" />
                  </button>
                </div>
              ) : (
                <div className="space-x-4">
                  <Link
                    href="/login"
                    className="text-gray-500 hover:text-gray-700 text-sm font-medium"
                  >
                    Sign in
                  </Link>
                  <Link
                    href="/signup"
                    className="bg-green-600 text-white hover:bg-green-700 px-4 py-2 rounded-md text-sm font-medium"
                  >
                    Get started
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>
      </nav>
      
      <main>{children}</main>
    </div>
  );
}
```

---

## File: ./src/lib/api-client.ts (FIXED)

```typescript
// This would be your API client implementation from the provided files
// I'm including a simplified version here

import axios, { AxiosInstance } from 'axios';

export interface Customer {
  id: string;
  name: string;
  email: string;
  created_at: string;
  updated_at: string;
}

export interface Subscription {
  id: number;
  customer_id: string;
  plan_type: 'base' | 'advanced' | 'exclusive';
  billing_cycle: 'monthly' | 'annual';
  status: 'active' | 'suspended' | 'cancelled';
  start_date: string;
  next_billing_date: string;
}

export interface PaymentMethod {
  id: number;
  customer_id: string;
  stripe_payment_method_id: string;
  stripe_customer_id: string;
  last_four: string;
  brand: string;
  exp_month: number;
  exp_year: number;
  cardholder_name?: string;
  is_default: boolean;
}

export interface BillingHistory {
  id: number;
  customer_id: string;
  subscription_id: number;
  amount: number;
  currency: string;
  status: 'pending' | 'completed' | 'failed' | 'refunded';
  payment_date: string;
}

export interface BillingHistoryResponse {
  data: BillingHistory[];
  pagination: {
    page: number;
    limit: number;
  };
}

export interface PaginationParams {
  page?: number;
  limit?: number;
}

export interface ApiError {
  error: string;
  status?: number;
}

export interface MessageResponse {
  message: string;
}

export interface UpdatePaymentMethodRequest {
  is_default: boolean;
}

export interface HealthCheckResponse {
  status: 'healthy' | 'unhealthy';
  service: string;
}

export interface TokenResponse {
  token: string;
}

export class ApiClient {
  private axios: AxiosInstance;
  private token: string | null = null;

  constructor() {
    this.axios = axios.create({
      baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    this.axios.interceptors.request.use((config) => {
      if (this.token) {
        config.headers.Authorization = `Bearer ${this.token}`;
      }
      return config;
    });

    this.axios.interceptors.response.use(
      (response) => response,
      (error) => {
        if (error.response?.status === 401) {
          // Clear token on unauthorized
          this.setAuthToken(null);
          if (typeof window !== 'undefined') {
            window.location.href = '/login';
          }
        }
        return Promise.reject(error);
      }
    );
  }

  setAuthToken(token: string | null) {
    this.token = token;
    if (typeof window !== 'undefined') {
      if (token) {
        localStorage.setItem('auth_token', token);
      } else {
        localStorage.removeItem('auth_token');
      }
    }
  }

  getAuthToken(): string | null {
    return this.token;
  }

  async login(email: string, password: string): Promise<TokenResponse> {
    const { data } = await this.axios.post<TokenResponse>('/api/v3/login', { email, password });
    this.setAuthToken(data.token);
    return data;
  }

  async signup(name: string, email: string, password: string, area_ids: number[]): Promise<Customer> {
    const { data } = await this.axios.post<Customer>('/api/v3/customers', {
      name,
      email,
      password,
      area_ids
    });
    return data;
  }

  async getCurrentCustomer() {
    const { data } = await this.axios.get<Customer>('/api/v3/customers/me');
    return data;
  }

  async updateCustomer(updates: { name?: string; email?: string; area_ids?: number[] }): Promise<MessageResponse> {
    const { data } = await this.axios.put<MessageResponse>('/api/v3/customers/me', updates);
    return data;
  }

  async deleteCustomer(): Promise<MessageResponse> {
    const { data } = await this.axios.delete<MessageResponse>('/api/v3/customers/me');
    return data;
  }

  async getCurrentSubscription() {
    const { data } = await this.axios.get<Subscription>('/api/v3/subscriptions/me');
    return data;
  }

  async createSubscription(plan_type: string, billing_cycle: 'monthly' | 'annual', payment_method_id: string) {
    const { data } = await this.axios.post('/api/v3/subscriptions', {
      plan_type,
      billing_cycle,
      stripe_payment_method_id: payment_method_id
    });
    return data;
  }

  async cancelSubscription() {
    const { data } = await this.axios.delete('/api/v3/subscriptions/me');
    return data;
  }

  async getBillingHistory(params?: PaginationParams): Promise<BillingHistoryResponse> {
    const { data } = await this.axios.get<BillingHistoryResponse>('/api/v3/billing-history', {
      params
    });
    return data;
  }

  async getPaymentMethods() {
    const { data } = await this.axios.get<PaymentMethod[]>('/api/v3/payment-methods');
    return data;
  }

  async addPaymentMethod(stripe_payment_method_id: string, is_default = false) {
    const { data } = await this.axios.post('/api/v3/payment-methods', {
      stripe_payment_method_id,
      is_default
    });
    return data;
  }

  // FIX: Add the missing deletePaymentMethod method
  async deletePaymentMethod(id: number): Promise<MessageResponse> {
    const { data } = await this.axios.delete<MessageResponse>(`/api/v3/payment-methods/${id}`);
    return data;
  }

  // FIX: Add the missing setDefaultPaymentMethod method
  async setDefaultPaymentMethod(id: number): Promise<MessageResponse> {
    const { data } = await this.axios.put<MessageResponse>(`/api/v3/payment-methods/${id}`, {
      is_default: true
    });
    return data;
  }
}

export const apiClient = new ApiClient();
```

---

## File: ./src/lib/auth-store.ts

```typescript
import { create } from 'zustand';
import { apiClient, Customer } from './api-client';

interface AuthState {
  user: Customer | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  signup: (name: string, email: string, password: string) => Promise<void>;
  logout: () => void;
  checkAuth: () => Promise<void>;
}

export const useAuthStore = create<AuthState>((set) => ({
  user: null,
  isAuthenticated: false,
  isLoading: true,

  login: async (email, password) => {
    const response = await apiClient.login(email, password);
    const user = await apiClient.getCurrentCustomer();
    set({ user, isAuthenticated: true });
  },

  signup: async (name, email, password) => {
    const customer = await apiClient.signup(name, email, password, [1]); // Default area
    const loginResponse = await apiClient.login(email, password);
    set({ user: customer, isAuthenticated: true });
  },

  logout: () => {
    apiClient.setAuthToken(null);
    set({ user: null, isAuthenticated: false });
  },

  checkAuth: async () => {
    const token = typeof window !== 'undefined' ? localStorage.getItem('auth_token') : null;
    if (token) {
      apiClient.setAuthToken(token);
      try {
        const user = await apiClient.getCurrentCustomer();
        set({ user, isAuthenticated: true, isLoading: false });
      } catch {
        set({ user: null, isAuthenticated: false, isLoading: false });
      }
    } else {
      set({ isLoading: false });
    }
  }
}));
```

---

## File: ./src/pages/index.tsx

```typescript
import { useRouter } from 'next/router';
import Image from 'next/image';
import { MapPin, Sparkles, BarChart3, Shield } from 'lucide-react';

export default function Home() {
  const router = useRouter();

  return (
    <div className="relative">
      {/* Hero Section */}
      <div className="bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
          <div className="text-center">
            <div className="flex justify-center mb-8">
              <Image 
                src="/cleanapp-logo.png" 
                alt="CleanApp" 
                width={300} 
                height={90}
                priority
              />
            </div>
            <h1 className="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl">
              <span className="block">Keep Your Property Clean</span>
              <span className="block text-green-600">With AI-Powered Monitoring</span>
            </h1>
            <p className="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl">
              CleanApp uses advanced AI to monitor litter in real-time, helping cities and organizations maintain cleaner environments.
            </p>
            <div className="mt-5 max-w-md mx-auto sm:flex sm:justify-center md:mt-8">
              <div className="rounded-md shadow">
                <button
                  onClick={() => router.push('/signup')}
                  className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-green-600 hover:bg-green-700 md:py-4 md:text-lg md:px-10"
                >
                  Get started for free
                </button>
              </div>
              <div className="mt-3 rounded-md shadow sm:mt-0 sm:ml-3">
                <button
                  onClick={() => router.push('/pricing')}
                  className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-green-600 bg-white hover:bg-gray-50 md:py-4 md:text-lg md:px-10"
                >
                  View pricing
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Features Section */}
      <div className="py-12 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="lg:text-center">
            <h2 className="text-base text-green-600 font-semibold tracking-wide uppercase">Features</h2>
            <p className="mt-2 text-3xl leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl">
              Everything you need to monitor litter
            </p>
          </div>

          <div className="mt-10">
            <div className="space-y-10 md:space-y-0 md:grid md:grid-cols-2 md:gap-x-8 md:gap-y-10">
              <div className="relative">
                <div className="absolute flex items-center justify-center h-12 w-12 rounded-md bg-green-600 text-white">
                  <MapPin className="h-6 w-6" />
                </div>
                <p className="ml-16 text-lg leading-6 font-medium text-gray-900">Real-time Mapping</p>
                <p className="mt-2 ml-16 text-base text-gray-500">
                  Track litter incidents as they happen with our interactive CleanAppMap.
                </p>
              </div>

              <div className="relative">
                <div className="absolute flex items-center justify-center h-12 w-12 rounded-md bg-green-600 text-white">
                  <Sparkles className="h-6 w-6" />
                </div>
                <p className="ml-16 text-lg leading-6 font-medium text-gray-900">AI Analytics</p>
                <p className="mt-2 ml-16 text-base text-gray-500">
                  Advanced AI identifies material composition, brands, and urgency ratings.
                </p>
              </div>

              <div className="relative">
                <div className="absolute flex items-center justify-center h-12 w-12 rounded-md bg-green-600 text-white">
                  <BarChart3 className="h-6 w-6" />
                </div>
                <p className="ml-16 text-lg leading-6 font-medium text-gray-900">Predictive Insights</p>
                <p className="mt-2 ml-16 text-base text-gray-500">
                  Anticipate hotspots and optimize cleanup resources with predictive analytics.
                </p>
              </div>

              <div className="relative">
                <div className="absolute flex items-center justify-center h-12 w-12 rounded-md bg-green-600 text-white">
                  <Shield className="h-6 w-6" />
                </div>
                <p className="ml-16 text-lg leading-6 font-medium text-gray-900">Smart City Integration</p>
                <p className="mt-2 ml-16 text-base text-gray-500">
                  Seamlessly integrate with existing smart city platforms like Open311.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
```

---

## File: ./src/pages/pricing.tsx

```typescript
import React, { useState } from 'react';
import { useRouter } from 'next/router';
import Image from 'next/image';
import { ChevronRight, Check, MapPin, BarChart3, Building2, Sparkles } from 'lucide-react';
import { useAuthStore } from '@/lib/auth-store';
import toast from 'react-hot-toast';

interface SubscriptionPlan {
  id: string;
  name: string;
  price: string;
  priceAmount?: number;
  billingCycle?: 'monthly' | 'annual';
  features: string[];
  apiPlanType?: 'base' | 'advanced' | 'exclusive';
  popular?: boolean;
  customPricing?: boolean;
  imageSrc?: string;
}

export default function PricingPage() {
  const router = useRouter();
  const { isAuthenticated } = useAuthStore();
  const [billingCycle, setBillingCycle] = useState<'monthly' | 'annual'>('monthly');
  const [isLoading, setIsLoading] = useState(false);

  const plans: SubscriptionPlan[] = [
    {
      id: 'free',
      name: 'forever free',
      price: 'Free',
      priceAmount: 0,
      features: ['web access to CleanAppMap'],
      imageSrc: '/free.png'
    },
    {
      id: 'lite',
      name: 'lite',
      price: '$100/mo',
      priceAmount: 100,
      apiPlanType: 'base',
      features: [
        'real time data subscription',
        'AI analytics (material composition, brand analysis, urgency ratings) for 1 location (geoquadrant) -or- 1 brand (eg, Redbull, Starbucks)',
        'access to CleanApp responder app'
      ],
      imageSrc: '/lite.png'
    },
    {
      id: 'enterprise',
      name: 'enterprise',
      price: '$500/mo',
      priceAmount: 500,
      apiPlanType: 'advanced',
      popular: true,
      features: [
        'lite tier, plus:',
        'priority access to AI hotspot mapping & predictive analytics for up to 5 locations -or- 5 brands',
        'integration support for firmware',
        'custom web dashboard'
      ],
      imageSrc: '/enterprise.png'
    },
    {
      id: 'civic',
      name: 'civic',
      price: 'case-by-case',
      apiPlanType: 'exclusive',
      customPricing: true,
      features: [
        'enterprise tier, plus:',
        'support for integration with existing smart-city incident reporting platforms (eg, Open311)'
      ],
      imageSrc: '/civic.png'
    }
  ];

  const handleSelectPlan = async (plan: SubscriptionPlan) => {
    if (!isAuthenticated) {
      router.push('/signup');
      return;
    }

    if (plan.id === 'free') {
      router.push('/dashboard');
      return;
    }

    if (plan.customPricing) {
      toast.success('Please contact our sales team for custom pricing');
      return;
    }

    // Navigate to checkout with plan details
    router.push({
      pathname: '/checkout',
      query: {
        plan: plan.apiPlanType,
        billing: billingCycle
      }
    });
  };

  const getMonthlyPrice = (plan: SubscriptionPlan) => {
    if (!plan.priceAmount || plan.priceAmount === 0) return 0;
    return billingCycle === 'annual' ? Math.round(plan.priceAmount * 0.8) : plan.priceAmount;
  };

  const getPriceDisplay = (plan: SubscriptionPlan) => {
    if (plan.customPricing) {
      return plan.price;
    }
    if (plan.priceAmount === 0) {
      return 'forever free';
    }
    const monthlyPrice = getMonthlyPrice(plan);
    return `$${monthlyPrice}/mo`;
  };

  return (
    <div className="py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Choose Your CleanApp Plan
          </h1>
          <p className="text-xl text-gray-600">
            Select the perfect plan for your litter monitoring needs
          </p>
        </div>

        {/* Billing Toggle - Only show if there are paid plans */}
        <div className="flex justify-center mb-12">
          <div className="bg-white rounded-lg shadow-sm p-1 inline-flex">
            <button
              onClick={() => setBillingCycle('monthly')}
              className={`px-4 py-2 rounded-md transition-colors ${
                billingCycle === 'monthly'
                  ? 'bg-green-600 text-white'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Monthly
            </button>
            <button
              onClick={() => setBillingCycle('annual')}
              className={`px-4 py-2 rounded-md transition-colors ${
                billingCycle === 'annual'
                  ? 'bg-green-600 text-white'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Annual <span className="text-sm">(Save 20%)</span>
            </button>
          </div>
        </div>

        {/* Plans Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {plans.map((plan) => (
            <div
              key={plan.id}
              className="relative rounded-2xl overflow-hidden transition-all duration-200 hover:shadow-lg"
              style={{ backgroundColor: '#EBF1E8' }}
            >
              {/* Plan Image */}
              <div className="h-40 relative overflow-hidden">
                <Image
                  src={plan.imageSrc || '/api/placeholder/400/300'}
                  alt={`${plan.name} plan`}
                  width={400}
                  height={160}
                  className="w-full h-full object-cover"
                  priority={plan.popular}
                />
                {plan.popular && (
                  <div className="absolute top-4 right-4 bg-green-600 text-white px-3 py-1 text-sm font-semibold rounded-full">
                    Popular
                  </div>
                )}
              </div>

              {/* Plan Details */}
              <div className="p-6">
                {/* Plan Name and Price */}
                <div className="text-center mb-6">
                  <h3 className="text-2xl font-bold text-green-700 mb-2">
                    {plan.name}
                  </h3>
                  <p className="text-3xl font-bold text-gray-900">
                    {getPriceDisplay(plan)}
                  </p>
                  {billingCycle === 'annual' && plan.priceAmount && plan.priceAmount > 0 && (
                    <p className="text-sm text-gray-600 mt-1">
                      ${Math.round(plan.priceAmount * 12 * 0.8)}/year
                    </p>
                  )}
                </div>

                {/* Features */}
                <ul className="space-y-3 mb-6 min-h-[200px]">
                  {plan.features.map((feature, index) => (
                    <li key={index} className="flex items-start">
                      <Check className="w-5 h-5 text-green-600 mr-2 flex-shrink-0 mt-0.5" />
                      <span className="text-sm text-gray-700 leading-tight">{feature}</span>
                    </li>
                  ))}
                </ul>

                {/* CTA Button */}
                <button
                  onClick={() => handleSelectPlan(plan)}
                  disabled={isLoading}
                  className={`w-full py-3 px-4 rounded-lg font-semibold transition-colors flex items-center justify-center ${
                    plan.id === 'free'
                      ? 'bg-white text-green-700 hover:bg-gray-50 border border-green-600'
                      : plan.customPricing
                      ? 'bg-gray-800 text-white hover:bg-gray-900'
                      : 'bg-green-600 text-white hover:bg-green-700'
                  } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  {plan.id === 'free' ? (
                    'Get Started'
                  ) : plan.customPricing ? (
                    'Contact Sales'
                  ) : (
                    <>
                      Subscribe Now
                      <ChevronRight className="w-4 h-4 ml-2" />
                    </>
                  )}
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Additional Information */}
        <div className="mt-16 text-center">
          <div className="bg-white rounded-2xl shadow-md p-8 max-w-3xl mx-auto">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">
              All plans include
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-left">
              <div>
                <div className="flex items-center mb-2">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mr-3">
                    <MapPin className="w-5 h-5 text-green-600" />
                  </div>
                  <h3 className="font-semibold text-gray-900">Real-time Updates</h3>
                </div>
                <p className="text-gray-600 text-sm ml-13">
                  Get instant notifications about litter incidents in your monitored areas
                </p>
              </div>
              <div>
                <div className="flex items-center mb-2">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mr-3">
                    <BarChart3 className="w-5 h-5 text-green-600" />
                  </div>
                  <h3 className="font-semibold text-gray-900">API Access</h3>
                </div>
                <p className="text-gray-600 text-sm ml-13">
                  Integrate CleanApp data into your existing systems
                </p>
              </div>
              <div>
                <div className="flex items-center mb-2">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mr-3">
                    <Sparkles className="w-5 h-5 text-green-600" />
                  </div>
                  <h3 className="font-semibold text-gray-900">24/7 Support</h3>
                </div>
                <p className="text-gray-600 text-sm ml-13">
                  Our team is here to help you make the most of CleanApp
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* FAQ or Contact Section */}
        <div className="mt-12 text-center">
          <p className="text-gray-600">
            Questions about our plans?{' '}
            <a href="#" className="text-green-600 font-semibold hover:underline">
              Contact our sales team
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}
```

---

## File: ./src/pages/login.tsx

```typescript
import { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { useAuthStore } from '@/lib/auth-store';
import toast from 'react-hot-toast';

interface LoginForm {
  email: string;
  password: string;
}

export default function LoginPage() {
  const router = useRouter();
  const login = useAuthStore((state) => state.login);
  const [isLoading, setIsLoading] = useState(false);
  
  const { register, handleSubmit, formState: { errors } } = useForm<LoginForm>();

  const onSubmit = async (data: LoginForm) => {
    setIsLoading(true);
    try {
      await login(data.email, data.password);
      toast.success('Welcome back!');
      router.push('/dashboard');
    } catch (error: any) {
      toast.error(error.response?.data?.error || 'Invalid credentials');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Sign in to your account
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Or{' '}
            <Link href="/signup" className="font-medium text-green-600 hover:text-green-500">
              start your free trial
            </Link>
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email" className="sr-only">
                Email address
              </label>
              <input
                {...register('email', { 
                  required: 'Email is required',
                  pattern: {
                    value: /^\S+@\S+$/i,
                    message: 'Invalid email address'
                  }
                })}
                type="email"
                autoComplete="email"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Email address"
              />
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
              )}
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                {...register('password', { required: 'Password is required' })}
                type="password"
                autoComplete="current-password"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Password"
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
```

---

## File: ./src/pages/dashboard.tsx

```typescript
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { useAuthStore } from '@/lib/auth-store';
import { apiClient, Subscription } from '@/lib/api-client';
import { MapPin, BarChart3, CreditCard, TrendingUp, Activity, Users, Clock, AlertCircle } from 'lucide-react';
import toast from 'react-hot-toast';

export default function DashboardPage() {
  const router = useRouter();
  const { user, isAuthenticated } = useAuthStore();
  const [subscription, setSubscription] = useState<Subscription | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
      return;
    }

    fetchSubscription();
  }, [isAuthenticated]);

  const fetchSubscription = async () => {
    try {
      const sub = await apiClient.getCurrentSubscription();
      setSubscription(sub);
    } catch (error: any) {
      if (error.response?.status !== 404) {
        toast.error('Failed to load subscription');
      }
    } finally {
      setLoading(false);
    }
  };

  const formatPlanName = (planType: string) => {
    const names: Record<string, string> = {
      base: 'Lite',
      advanced: 'Enterprise',
      exclusive: 'Civic'
    };
    return names[planType] || planType;
  };

  const getLocationLimit = () => {
    if (!subscription) return 0;
    switch (subscription.plan_type) {
      case 'base': return 1;
      case 'advanced': return 5;
      case 'exclusive': return 'Unlimited';
      default: return 0;
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
        <p className="text-gray-600 mt-2">Welcome back, {user?.name}!</p>
      </div>

      {/* Subscription Alert */}
      {!subscription && (
        <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-8">
          <div className="flex">
            <AlertCircle className="h-5 w-5 text-yellow-400" />
            <div className="ml-3">
              <p className="text-sm text-yellow-700">
                You're currently on the free tier. 
                <button 
                  onClick={() => router.push('/pricing')}
                  className="font-medium underline text-yellow-700 hover:text-yellow-600 ml-2"
                >
                  Upgrade to unlock more features
                </button>
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Active Locations</p>
              <p className="text-2xl font-bold text-gray-900">
                0 / {getLocationLimit()}
              </p>
            </div>
            <MapPin className="h-8 w-8 text-green-600" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Reports This Month</p>
              <p className="text-2xl font-bold text-gray-900">0</p>
            </div>
            <BarChart3 className="h-8 w-8 text-green-600" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">AI Credits Used</p>
              <p className="text-2xl font-bold text-gray-900">
                0 / {subscription ? '1000' : '10'}
              </p>
            </div>
            <TrendingUp className="h-8 w-8 text-green-600" />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Active Alerts</p>
              <p className="text-2xl font-bold text-gray-900">0</p>
            </div>
            <Activity className="h-8 w-8 text-green-600" />
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Subscription Status */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Your Subscription</h2>
          {subscription ? (
            <div className="space-y-3">
              <div className="flex justify-between py-2 border-b">
                <span className="text-gray-600">Plan</span>
                <span className="font-semibold text-gray-900">{formatPlanName(subscription.plan_type)}</span>
              </div>
              <div className="flex justify-between py-2 border-b">
                <span className="text-gray-600">Status</span>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  {subscription.status}
                </span>
              </div>
              <div className="flex justify-between py-2 border-b">
                <span className="text-gray-600">Billing</span>
                <span className="font-semibold text-gray-900 capitalize">{subscription.billing_cycle}</span>
              </div>
              <div className="flex justify-between py-2">
                <span className="text-gray-600">Next billing</span>
                <span className="font-semibold text-gray-900">
                  {new Date(subscription.next_billing_date).toLocaleDateString()}
                </span>
              </div>
              <div className="mt-4 pt-4 border-t">
                <button
                  onClick={() => router.push('/billing')}
                  className="text-green-600 hover:text-green-700 font-medium"
                >
                  Manage subscription →
                </button>
              </div>
            </div>
          ) : (
            <div>
              <p className="text-gray-600 mb-4">You're on the free tier with limited features.</p>
              <button
                onClick={() => router.push('/pricing')}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 w-full"
              >
                Upgrade Now
              </button>
            </div>
          )}
        </div>

        {/* Recent Activity */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Recent Activity</h2>
          <div className="space-y-4">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                  <Users className="w-4 h-4 text-green-600" />
                </div>
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium text-gray-900">Account created</p>
                <p className="text-sm text-gray-500">Welcome to CleanApp!</p>
                <p className="text-xs text-gray-400 mt-1">
                  {user?.created_at ? new Date(user.created_at).toLocaleDateString() : 'Recently'}
                </p>
              </div>
            </div>
            
            {subscription && (
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                    <CreditCard className="w-4 h-4 text-green-600" />
                  </div>
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-900">Subscription started</p>
                  <p className="text-sm text-gray-500">{formatPlanName(subscription.plan_type)} plan activated</p>
                  <p className="text-xs text-gray-400 mt-1">
                    {new Date(subscription.start_date).toLocaleDateString()}
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Map Preview */}
      <div className="bg-white rounded-lg shadow p-6 mt-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">CleanApp Map</h2>
          <button className="text-green-600 hover:text-green-700 font-medium">
            Open full map →
          </button>
        </div>
        <div className="bg-gray-100 h-96 rounded-lg flex items-center justify-center">
          <div className="text-center">
            <MapPin className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">Map integration coming soon</p>
            <p className="text-sm text-gray-400 mt-2">
              {subscription ? 'Set up your first monitoring location' : 'Upgrade to access real-time monitoring'}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
```

---

## File: ./src/pages/checkout.tsx

```typescript
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { loadStripe } from '@stripe/stripe-js';
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from '@stripe/react-stripe-js';
import { useAuthStore } from '@/lib/auth-store';
import { apiClient } from '@/lib/api-client';
import toast from 'react-hot-toast';
import { ArrowLeft, Lock, CreditCard } from 'lucide-react';

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || '');

const CARD_ELEMENT_OPTIONS = {
  style: {
    base: {
      color: '#32325d',
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '16px',
      '::placeholder': {
        color: '#aab7c4'
      }
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a'
    }
  }
};

interface CheckoutFormProps {
  planType: string;
  billingCycle: 'monthly' | 'annual';
}

function CheckoutForm({ planType, billingCycle }: CheckoutFormProps) {
  const stripe = useStripe();
  const elements = useElements();
  const router = useRouter();
  const { user } = useAuthStore();
  const [isProcessing, setIsProcessing] = useState(false);
  const [cardholderName, setCardholderName] = useState('');
  const [email, setEmail] = useState(user?.email || '');

  const getPlanDetails = () => {
    const plans = {
      base: { name: 'Lite', price: 100 },
      advanced: { name: 'Enterprise', price: 500 },
      exclusive: { name: 'Civic', price: 0 } // Custom pricing
    };
    
    const plan = plans[planType as keyof typeof plans];
    if (!plan) return null;
    
    const monthlyPrice = plan.price;
    const price = billingCycle === 'annual' ? monthlyPrice * 12 * 0.8 : monthlyPrice;
    
    return {
      ...plan,
      price,
      displayPrice: billingCycle === 'annual' ? `$${price}/year` : `$${monthlyPrice}/month`
    };
  };

  const planDetails = getPlanDetails();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!stripe || !elements || !planDetails) {
      return;
    }

    const cardElement = elements.getElement(CardElement);
    if (!cardElement) {
      return;
    }

    setIsProcessing(true);

    try {
      // Create payment method
      const { error, paymentMethod } = await stripe.createPaymentMethod({
        type: 'card',
        card: cardElement,
        billing_details: {
          name: cardholderName,
          email: email,
        },
      });

      if (error) {
        toast.error(error.message || 'Payment failed');
        setIsProcessing(false);
        return;
      }

      if (!paymentMethod) {
        toast.error('Payment method creation failed');
        setIsProcessing(false);
        return;
      }

      // Create subscription via API
      await apiClient.createSubscription(
        planType,
        billingCycle,
        paymentMethod.id
      );

      toast.success('Subscription created successfully!');
      router.push('/dashboard');
    } catch (error: any) {
      console.error('Subscription error:', error);
      toast.error(error.response?.data?.error || 'Failed to create subscription');
    } finally {
      setIsProcessing(false);
    }
  };

  if (!planDetails) {
    return <div>Invalid plan selected</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="max-w-md mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h3 className="text-lg font-semibold mb-4">Subscription Summary</h3>
        <div className="border-b pb-4 mb-4">
          <div className="flex justify-between mb-2">
            <span className="text-gray-600">Plan</span>
            <span className="font-medium">{planDetails.name}</span>
          </div>
          <div className="flex justify-between mb-2">
            <span className="text-gray-600">Billing Cycle</span>
            <span className="font-medium capitalize">{billingCycle}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">Total</span>
            <span className="font-bold text-lg">{planDetails.displayPrice}</span>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <CreditCard className="w-5 h-5 mr-2" />
          Payment Information
        </h3>
        
        <div className="space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
              required
            />
          </div>

          <div>
            <label htmlFor="cardholder-name" className="block text-sm font-medium text-gray-700 mb-1">
              Cardholder Name
            </label>
            <input
              type="text"
              id="cardholder-name"
              value={cardholderName}
              onChange={(e) => setCardholderName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Card Information
            </label>
            <div className="border border-gray-300 rounded-md p-3">
              <CardElement options={CARD_ELEMENT_OPTIONS} />
            </div>
          </div>
        </div>

        <button
          type="submit"
          disabled={!stripe || isProcessing}
          className="w-full mt-6 bg-green-600 text-white py-3 px-4 rounded-md font-semibold hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
        >
          {isProcessing ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
              Processing...
            </>
          ) : (
            <>
              <Lock className="w-5 h-5 mr-2" />
              Subscribe {planDetails.displayPrice}
            </>
          )}
        </button>

        <p className="text-xs text-gray-500 text-center mt-4">
          Your payment information is encrypted and secure. You can cancel your subscription at any time.
        </p>
      </div>
    </form>
  );
}

export default function CheckoutPage() {
  const router = useRouter();
  const { isAuthenticated } = useAuthStore();
  const { plan, billing } = router.query;

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
    }
  }, [isAuthenticated, router]);

  if (!plan || !billing) {
    return (
      <div className="min-h-screen bg-gray-50 py-12 px-4">
        <div className="max-w-md mx-auto text-center">
          <p className="text-gray-600 mb-4">No plan selected</p>
          <button
            onClick={() => router.push('/pricing')}
            className="text-green-600 hover:text-green-700 font-medium"
          >
            ← Back to pricing
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4">
      <div className="max-w-2xl mx-auto">
        <button
          onClick={() => router.push('/pricing')}
          className="flex items-center text-gray-600 hover:text-gray-900 mb-8"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to pricing
        </button>

        <h1 className="text-3xl font-bold text-gray-900 mb-8 text-center">
          Complete Your Subscription
        </h1>

        <Elements stripe={stripePromise}>
          <CheckoutForm 
            planType={plan as string} 
            billingCycle={billing as 'monthly' | 'annual'} 
          />
        </Elements>
      </div>
    </div>
  );
}
```

---

## File: ./src/pages/_document.tsx

```typescript
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        <link rel="icon" href="/favicon.ico" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <meta name="theme-color" content="#16a34a" />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
```

---

## File: ./src/pages/signup.tsx

```typescript
import { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { useAuthStore } from '@/lib/auth-store';
import toast from 'react-hot-toast';

interface SignupForm {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
}

export default function SignupPage() {
  const router = useRouter();
  const signup = useAuthStore((state) => state.signup);
  const [isLoading, setIsLoading] = useState(false);
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm<SignupForm>();
  const password = watch('password');

  const onSubmit = async (data: SignupForm) => {
    setIsLoading(true);
    try {
      await signup(data.name, data.email, data.password);
      toast.success('Account created successfully!');
      router.push('/dashboard');
    } catch (error: any) {
      toast.error(error.response?.data?.error || 'Failed to create account');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Create your account
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Or{' '}
            <Link href="/login" className="font-medium text-green-600 hover:text-green-500">
              sign in to your existing account
            </Link>
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                Full Name
              </label>
              <input
                {...register('name', { required: 'Name is required' })}
                type="text"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="John Doe"
              />
              {errors.name && (
                <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
              )}
            </div>
            
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email Address
              </label>
              <input
                {...register('email', { 
                  required: 'Email is required',
                  pattern: {
                    value: /^\S+@\S+$/i,
                    message: 'Invalid email address'
                  }
                })}
                type="email"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="john@example.com"
              />
              {errors.email && (
                <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
              )}
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <input
                {...register('password', { 
                  required: 'Password is required',
                  minLength: {
                    value: 8,
                    message: 'Password must be at least 8 characters'
                  }
                })}
                type="password"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="••••••••"
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>
            
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirm Password
              </label>
              <input
                {...register('confirmPassword', { 
                  required: 'Please confirm your password',
                  validate: value => value === password || 'Passwords do not match'
                })}
                type="password"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="••••••••"
              />
              {errors.confirmPassword && (
                <p className="mt-1 text-sm text-red-600">{errors.confirmPassword.message}</p>
              )}
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? 'Creating account...' : 'Create account'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
```

---

## File: ./src/pages/billing.tsx (FIXED)

```typescript
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useAuthStore } from '@/lib/auth-store';
import { apiClient, Subscription, PaymentMethod, BillingHistory } from '@/lib/api-client';
import { CreditCard, Calendar, Download, Plus, Trash2, Check } from 'lucide-react';
import toast from 'react-hot-toast';

export default function BillingPage() {
  const router = useRouter();
  const { isAuthenticated } = useAuthStore();
  const [subscription, setSubscription] = useState<Subscription | null>(null);
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [billingHistory, setBillingHistory] = useState<BillingHistory[]>([]);
  const [loading, setLoading] = useState(true);
  const [cancelling, setCancelling] = useState(false);

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/login');
      return;
    }

    fetchBillingData();
  }, [isAuthenticated]);

  const fetchBillingData = async () => {
    try {
      const [sub, methods, history] = await Promise.all([
        apiClient.getCurrentSubscription().catch(() => null),
        apiClient.getPaymentMethods().catch(() => []),
        apiClient.getBillingHistory({ limit: 10 }).catch(() => ({ data: [], pagination: { page: 1, limit: 10 } }))
      ]);

      setSubscription(sub);
      setPaymentMethods(methods || []);
      setBillingHistory(history?.data || []);
    } catch (error) {
      console.error('Billing data error:', error);
      toast.error('Failed to load billing information');
      // Ensure we have default values even on error
      setPaymentMethods([]);
      setBillingHistory([]);
    } finally {
      setLoading(false);
    }
  };

  const handleCancelSubscription = async () => {
    if (!confirm('Are you sure you want to cancel your subscription? This action cannot be undone.')) {
      return;
    }

    setCancelling(true);
    try {
      await apiClient.cancelSubscription();
      toast.success('Subscription cancelled successfully');
      setSubscription(null);
    } catch (error) {
      toast.error('Failed to cancel subscription');
    } finally {
      setCancelling(false);
    }
  };

  const handleDeletePaymentMethod = async (id: number) => {
    if (!confirm('Are you sure you want to remove this payment method?')) {
      return;
    }

    try {
      await apiClient.deletePaymentMethod(id);
      setPaymentMethods(methods => methods.filter(m => m.id !== id));
      toast.success('Payment method removed');
    } catch (error) {
      toast.error('Failed to remove payment method');
    }
  };

  const handleSetDefaultPaymentMethod = async (id: number) => {
    try {
      await apiClient.setDefaultPaymentMethod(id);
      await fetchBillingData();
      toast.success('Default payment method updated');
    } catch (error) {
      toast.error('Failed to update default payment method');
    }
  };

  const formatPlanName = (planType: string) => {
    const names: Record<string, string> = {
      base: 'Lite',
      advanced: 'Enterprise',
      exclusive: 'Civic'
    };
    return names[planType] || planType;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const formatPrice = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 className="text-3xl font-bold text-gray-900 mb-8">Billing & Subscription</h1>

      {/* Current Subscription */}
      <div className="bg-white rounded-lg shadow mb-8 p-6">
        <h2 className="text-xl font-semibold mb-4">Current Subscription</h2>
        {subscription ? (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-gray-600">Plan</p>
                <p className="font-semibold">{formatPlanName(subscription.plan_type)}</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">Billing Cycle</p>
                <p className="font-semibold capitalize">{subscription.billing_cycle}</p>
              </div>
              <div>
                <p className="text-sm text-gray-600">Status</p>
                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  subscription.status === 'active' 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  {subscription.status}
                </span>
              </div>
              <div>
                <p className="text-sm text-gray-600">Next Billing Date</p>
                <p className="font-semibold">{formatDate(subscription.next_billing_date)}</p>
              </div>
            </div>
            
            <div className="pt-4 border-t flex flex-col sm:flex-row gap-4">
              <button
                onClick={() => router.push('/pricing')}
                className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700"
              >
                Change Plan
              </button>
              <button
                onClick={handleCancelSubscription}
                disabled={cancelling}
                className="text-red-600 hover:text-red-700 font-medium disabled:opacity-50"
              >
                {cancelling ? 'Cancelling...' : 'Cancel Subscription'}
              </button>
            </div>
          </div>
        ) : (
          <div>
            <p className="text-gray-600 mb-4">You don't have an active subscription.</p>
            <button
              onClick={() => router.push('/pricing')}
              className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700"
            >
              View Plans
            </button>
          </div>
        )}
      </div>

      {/* Payment Methods */}
      <div className="bg-white rounded-lg shadow mb-8 p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Payment Methods</h2>
          <button
            onClick={() => router.push('/add-payment-method')}
            className="flex items-center text-green-600 hover:text-green-700 font-medium"
          >
            <Plus className="w-4 h-4 mr-1" />
            Add New
          </button>
        </div>
        
        {paymentMethods && paymentMethods.length > 0 ? (
          <div className="space-y-3">
            {paymentMethods.map((method) => (
              <div key={method.id} className="border rounded-lg p-4 flex items-center justify-between">
                <div className="flex items-center">
                  <CreditCard className="w-8 h-8 text-gray-400 mr-4" />
                  <div>
                    <p className="font-medium">
                      {method.brand.charAt(0).toUpperCase() + method.brand.slice(1)} •••• {method.last_four}
                    </p>
                    <p className="text-sm text-gray-600">
                      Expires {method.exp_month}/{method.exp_year}
                    </p>
                  </div>
                  {method.is_default && (
                    <span className="ml-4 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      Default
                    </span>
                  )}
                </div>
                <div className="flex items-center space-x-2">
                  {!method.is_default && (
                    <button
                      onClick={() => handleSetDefaultPaymentMethod(method.id)}
                      className="text-sm text-green-600 hover:text-green-700"
                    >
                      Set as default
                    </button>
                  )}
                  <button
                    onClick={() => handleDeletePaymentMethod(method.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-600">No payment methods on file.</p>
        )}
      </div>

      {/* Billing History */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-semibold mb-4">Billing History</h2>
        {billingHistory && billingHistory.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead>
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Date
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Amount
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Invoice
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {billingHistory.map((record) => (
                  <tr key={record.id}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {formatDate(record.payment_date)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {formatPrice(record.amount)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        record.status === 'completed' 
                          ? 'bg-green-100 text-green-800' 
                          : record.status === 'failed'
                          ? 'bg-red-100 text-red-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {record.status}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <button className="text-green-600 hover:text-green-700">
                        <Download className="w-4 h-4" />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p className="text-gray-600">No billing history available.</p>
        )}
      </div>
    </div>
  );
}
```

---

## File: ./src/pages/_app.tsx

```typescript
import '@/styles/globals.css';
import type { AppProps } from 'next/app';
import { useEffect } from 'react';
import { Toaster } from 'react-hot-toast';
import { useAuthStore } from '@/lib/auth-store';
import Layout from '@/components/Layout';

export default function App({ Component, pageProps }: AppProps) {
  const checkAuth = useAuthStore((state) => state.checkAuth);

  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  return (
    <>
      <Layout>
        <Component {...pageProps} />
      </Layout>
      <Toaster position="top-right" />
    </>
  );
}
```

---

## Summary of Changes

The main fix was adding the two missing methods to the `ApiClient` class in `./src/lib/api-client.ts`:

1. **`deletePaymentMethod(id: number)`**: Sends a DELETE request to remove a payment method
2. **`setDefaultPaymentMethod(id: number)`**: Sends a PUT request to set a payment method as default

These methods were being called in the billing page but were not implemented in the API client, causing runtime errors. The fix ensures proper communication with the backend API for payment method management.